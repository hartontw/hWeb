<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <title>Daniel Harton | {{ title }} </title>
    {{> styles }}
</head>

<body>
    {{> navbar }}
    <div id="container"></div>
    {{> footer }}

    {{> scripts }}
    <script src="https://threejs.org/build/three.min.js"></script>
    <script src="assets/js/Three/Water.js"></script>
    <script src="assets/js/Three/Sky.js"></script>
    <script src="assets/js/Three/WebGL.js"></script>
    <script>

        const width = () => window.innerWidth;
        const height = () => window.innerHeight - $('nav').height() - $('footer').height();
        const aspect = () => width() / height();;

        if (WEBGL.isWebGLAvailable() === false)
        {
            document.body.appendChild(WEBGL.getWebGLErrorMessage());
        }

        const renderer = function ()
        {
            let renderer = new THREE.WebGLRenderer();
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(width(), height());
            return renderer;
        }();

        const container = function ()
        {
            let container = document.getElementById('container');
            container.appendChild(renderer.domElement);
            return container;
        }();

        const scene = function ()
        {
            return new THREE.Scene();
        }();

        const camera = function ()
        {
            let camera = new THREE.PerspectiveCamera(55, aspect(), 1, 20000);
            camera.position.set(0, 20, 100);
            return camera;
        }();

        const light = function ()
        {
            let light = new THREE.DirectionalLight(0xffffff, 0.8);
            scene.add(light);
            return light;
        }();

        const water = function ()
        {
            const waterGeometry = new THREE.PlaneBufferGeometry(10000, 10000);
            let water = new THREE.Water(
                waterGeometry,
                {
                    textureWidth: 512,
                    textureHeight: 512,
                    waterNormals: new THREE.TextureLoader().load('assets/textures/waternormals.jpg',
                        (texture) =>
                        {
                            texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
                        }),
                    alpha: 1.0,
                    sunDirection: light.position.clone().normalize(),
                    sunColor: 0xffffff,
                    waterColor: 0x001e0f,
                    distortionScale: 3.7,
                    fog: scene.fog !== undefined
                }
            );
            water.rotation.x = - Math.PI / 2;
            scene.add(water);
            return water;
        }();

        const sky = function ()
        {
            let sky = new THREE.Sky();
            sky.scale.setScalar(10000);
            scene.add(sky);

            let uniforms = sky.material.uniforms;
            uniforms[ "turbidity" ].value = 10;
            uniforms[ "rayleigh" ].value = 2;
            uniforms[ "luminance" ].value = 1;
            uniforms[ "mieCoefficient" ].value = 0.005;
            uniforms[ "mieDirectionalG" ].value = 0.8;

            let parameters = {
                distance: 400,
                inclination: 0.47,
                azimuth: 0.205
            };

            let cubeCamera = new THREE.CubeCamera(1, 20000, 256);
            cubeCamera.renderTarget.texture.generateMipmaps = true;
            cubeCamera.renderTarget.texture.minFilter = THREE.LinearMipMapLinearFilter;

            function updateSun()
            {
                let theta = Math.PI * (parameters.inclination - 0.5);
                let phi = 2 * Math.PI * (parameters.azimuth - 0.5);
                //light.position.x = parameters.distance * Math.cos(phi);
                light.position.y = parameters.distance * Math.sin(phi) * Math.sin(theta);
                light.position.z = parameters.distance * Math.sin(phi) * Math.cos(theta);
                sky.material.uniforms[ "sunPosition" ].value = light.position.copy(light.position);
                water.material.uniforms[ "sunDirection" ].value.copy(light.position).normalize();
                cubeCamera.update(renderer, scene);
            }

            updateSun();

            return sky;
        }();

        function CreateLinkedMesh(scale, image, url)
        {
            const geometry = new THREE.BoxGeometry(scale, scale, scale);
            const material = new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load(image) });

            let mesh = new THREE.Mesh(geometry, material);
            mesh.callback = () => { window.open(url, '_blank'); }
            scene.add(mesh);

            return mesh;
        }

        let linkedin = CreateLinkedMesh(20, 'assets/textures/linkedin.jpg', 'https://www.linkedin.com/in/harton/');
        let github = CreateLinkedMesh(20, 'assets/textures/github.png', 'https://github.com/hartontw');
        let gitlab = CreateLinkedMesh(20, 'assets/textures/gitlab.png', 'https://gitlab.com/hartontw');

        refreshCubes();

        function refreshCubes()
        {
            gitlab.position.x = Math.min(-30 * camera.aspect, -5);
            linkedin.position.x = 0;
            github.position.x = Math.max(30 * camera.aspect, 5);

            const scale = Math.min(camera.aspect, 1);
            linkedin.scale.set(scale, scale, scale);
            github.scale.set(scale, scale, scale);
            gitlab.scale.set(scale, scale, scale);            
        }

        function onDocumentMouseDown(event)
        {
            event.preventDefault();

            const raycaster = new THREE.Raycaster();
            const mouse = new THREE.Vector2();

            mouse.x = (event.clientX / renderer.domElement.clientWidth) * 2 - 1;
            mouse.y = - (event.clientY / renderer.domElement.clientHeight) * 2 + 1;

            raycaster.setFromCamera(mouse, camera);

            meshObjects = [ gitlab, linkedin, github ];

            let intersects = raycaster.intersectObjects(meshObjects);

            if (intersects.length > 0)
            {
                intersects[ 0 ].object.callback();
            }
        }

        function onWindowResize()
        {
            camera.aspect = aspect();
            camera.updateProjectionMatrix();
            renderer.setSize(width(), height());
            refreshCubes();
        }

        function animate()
        {
            requestAnimationFrame(animate);
            render();
        }

        function render()
        {
            var time = performance.now() * 0.001;

            if (linkedin !== undefined)
            {
                var t = time + 1.1;
                linkedin.position.y = Math.sin(t * 0.5) * 2 + 13;
                linkedin.rotation.y = t * 0.2;
            }
            if (github !== undefined)
            {
                var t = time + 2.2;
                github.position.y = Math.sin(t * 0.5) * 2 + 13;
                github.rotation.y = t * 0.2;
            }
            if (gitlab !== undefined)
            {
                var t = time + 3.3;
                gitlab.position.y = Math.sin(t * 0.5) * 2 + 13;
                gitlab.rotation.y = t * 0.2;
            }

            water.material.uniforms[ "time" ].value += 1.0 / 60.0;

            renderer.render(scene, camera);
        }

        animate();

        window.addEventListener('resize', onWindowResize, false);
        document.addEventListener('mousedown', onDocumentMouseDown, false);
    </script>
</body>

</html>